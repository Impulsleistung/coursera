f_fac<-c("pos","neg","pos","pos","neg")
table(f_fac)
unclass(f_fac)
a <- c(10,20,15,43,76,41,25,46)                        # numerisch
b <- factor(c("m", "w", "m", "w", "m", "w", "m", "w")) # Faktor Geschlecht: m=männlich, w=weiblich
c <- c(2,5,8,3,6,1,5,6)                                # numerisch
myframe <- data.frame(a,b,c)
myframe
unclass(myframe)
m_mat<-matrix(1:6,2,3)
m_mat
for(i in seq_len(nrow(x)))
for(j in seq_len(ncol(x)))
print(m_mat[i,j])
m_mat<-matrix(11:16,2,3)
for(i in seq_len(nrow(m_mat))) {
for(j in seq_len(ncol(m_mat))) {
print(m_mat[i,j])
}
}
c<-rbinom(10,1,0.5)
c<-rbinom(10,1,0.5)
rbinom(10,1,0.5)
rbinom(10,1,0.9)
rbinom(10,1,0.5)
rbinom(10,3,0.5)
rbinom(20,1,0.5)
daten<-rnorm(100)
daten
sd(daten,na.rm = TRUE)
daten<-rnorm(100)
sd(daten,na.rm = TRUE)
above10 <- function(x) {
use <- x > 10
x[use]
}
data <- 5:15
data
above10(data)
source("bib_fun_1.R")
col_mean(werte_mat = airquality,removeNA = FALSE)
col_mean(werte_mat = airquality,removeNA = TRUE)
source("bib_fun_1.R")
col_mean(werte_mat = airquality,removeNA = TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/bib_fun_1.R')
debugSource('~/Dokumente/coursera_git/02_rProgramming/bib_fun_1.R', echo=TRUE)
col_mean(werte_mat = airquality,removeNA = TRUE)
# Leeren Vektor initalisieren
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x = werte_mat,na.rm = removeNA)
}
means
}
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x = werte_mat,na.rm = removeNA)
}
means
}
airquality
source("bib_fun_1.R")
col_mean(werte_mat = airquality)
source("bib_fun_1.R")
col_mean(werte_mat = airquality)
col_mean(werte_mat = airquality, removeNA = TRUE)
matrix(data = rep(x = 10:4),2,4)
matrix(data = rep(x = 10:4),2,2)
matrix(data = rep(x = 10,4),2,2)
matrix(data = rep(x = 10,4),4,2)
matrix(data = rep(x = 10,2),4,2)
rep(1:4,2)
rep(1:4,each=2)
rep(1:4,each=3,len=6)
rep(1:4,each=3,len=7)
rep(1:4,each=3,len=9)
rep(1:4,each=3,len=10)
rep(1:4,3)
A<-matrix(1:4,2,2)
View(A)
B<-matrix(rep(10,4),2,2)
View(B)
A*B
A%*%B
A
B
x<-Sys.time
x
x<-Sys.time()
x
unclass(x)
as.POSIXct(x)
p<-as.POSIXct(x)
unclass(p)
names(unclass(p))
class(p)
names(unclass(p))
unclass(p)
p$sec
as.POSIXlt(x)
p<-as.POSIXlt(x)
names(p)
names(unclass(p))
p$sec
Sys.time
Sys.time()
Sys.time()
time()
x<-Sys.time()
as.POSIXlt(x)
p<-as.POSIXlt(x)
names(unclass(p))
p$is
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x<-c(1,2,NA,10)
is.na(x)
good<-!is.na(x)
goog
good
a <- c(10,20,15,43,76,41,25,46)                        # numerisch
b <- factor(c("m", "w", "m", "w", "m", "w", "m", "w")) # Faktor Geschlecht: m=männlich, w=weiblich
c <- c(2,5,8,3,6,1,5,6)                                # numerisch
myframe <- data.frame(a,b,c); myframe
names(myframe)<-c("Age","Gender","Dose")
myframe
x<-c(1,2,NA,10)
good<-!is.na(x)
good#
complete.cases(x)
y<-x[complete.cases(x)]
y
matrix(rbinom(10,1,0.5),5,2)
matrix(rbinom(10,1,0.5),5,2)
matrix(rbinom(10,1,0.7),5,2)
matrix(rbinom(10,NA,0.2),5,2)
matrix(rbinom(10,NA,0.3),5,2)
matrix(rbinom(1,NA,0.3),5,2)
matrix(rbinom(10,1,0.7),5,2)
matrix(rbinom(10,1,0.5),5,2)
m<-matrix(rbinom(10,1,0.5),5,2)
m
m<-matrix(rbinom(10,1,0.2),5,2)
m
m[3,1]=NA
m
m
m[complete.cases(m)]
m[,complete.cases(m)]
m[complete.cases(m),,drop=FALSE]
m[,complete.cases(m),drop=FALSE]
m[complete.cases(m),,drop=FALSE]
m
subset(x = m,select = !is.na)
subset(x = m, !is.na)
subset(x = m, rm.na)
subset(x = m, subset = is.na)
subset(x = m, is.na(m))
subset(x = m, is.na)
subset(x = m, is.na())
subset(x = m, is.na(m))
subset(x = m, is.na(row(m))
lll
subset(x = m, is.na(row(m))
llll
subset.matrix(x = m)
subset.matrix(x = m,select = "NA")
subset.matrix(x = m,select = is.na)
subset.matrix(x = m,select = is.na())
subset.matrix(x = m,select = is.na(m))
subset.matrix(x = m,select = complete.cases(m))
m[,!is.na()]
m[,!is.na]
m[,!is.na(m)]
m
m != NA
m > NA
m
m>0
m>NA
m!NA
m!=NA
m<0
m[,!=NA]
m[,NA]
m[,=NA]
m[,is.na]
m<-matrix(rbinom(10,1,0.2),5,2)
m[3,1]<-NA
m
subset(m,subset = !NA, select = c(1,2))
subset(m,subset = NA, select = c(1,2))
subset(m,select = c(1,2))
subset(m,!is.na(m)select = c(1,2))
subset(m,is.na(m),select = c(1,2))
subset(m,is.na()=FALSE,select = c(1,2))
subset(m,is.na=FALSE,select = c(1,2))
subset(m,is.na=TRUE,select = c(1,2))
subset(m,subset = is.na=TRUE,select = c(1,2))
subset(m,subset = is.na,select = c(1,2))
subset(m,subset = complete.cases(m),select = c(1,2))
m
m[complete.cases(m),]
m[complete.cases(m),][,2]
m[complete.cases(m),][,]
m[complete.cases(m),]
help(file)
con <- gzfile("rprog-data-quiz1_data.zip","r")
dat<-read.csv(con)
dat<-read.csv2(con)
View(dat)
View(dat)
dat<-readLines(con,10)
dat<-readLines(con)
read.table(unz("rprog-data-quiz1_data.zip"))
read.table(unz("rprog-data-quiz1_data.zip","hw1_data.csv"))
read.table(unz("rprog-data-quiz1_data.zip","hw1_data.csv"), sep = ",")
dat<-read.table(unz("rprog-data-quiz1_data.zip","hw1_data.csv"), sep = ",",quote = "\"")
View(dat)
dat<-read.table(unz("rprog-data-quiz1_data.zip","hw1_data.csv"), sep = ",",header = TRUE,quote = "\"")
View(dat)
View(dat)
head(dat)
class(dat)
names(dat)
colnames(dat)
unclass(dat)
View(dat)
dat$O
dat$W
dat<-airquality
dat
class(dat)
dput(x = dat, file = "dat.R")
rm(list=ls())
dat
dget(file = "dat.R")
dat<-dget(file = "dat.R")
v_vec<-c(1:4,11:14);
m_mat<-matrix(v_vec, nrow=5, ncol=4);
m_mat
m_mat<-matrix(v_vec, nrow=4, ncol=4);
dump(c(v_vec,m_mat),file = "dat.R")
dump(c(v_vec,m_mat),file = "dat1.R")
dump(c("v_vec","m_mat"),file = "dat.R")
rm(list=ls())
source("dat.R")
ls()
dat<-read.table(unz("rprog-data-quiz1_data.zip","hw1_data.csv"), sep = ",",header = TRUE,quote = "\"")
dat[complete.cases(dat),]
tmp<-dat[complete.cases(dat),]
dim(tmp)
rm(tmp)
good_dat<-dat[complete.cases(dat),]
dim(good_dat)
colMeans(x = dat, na.rm = TRUE)
colMeans(x = good_dat)
good_dat$Oz
dat_sub <- subset(x = good_dat, subset = good_dat$Oz>31 & good_dat$Te>90)
dat_sub
colMeans(x = dat_sub)
??max
max(dat_sub)
max(dat_sub$Solar.R)
max(dat_sub$Ozone)
max(dat_sub$Ozone)
# - Mittelwert jeder Spalte
source('~/Dokumente/coursera_git/02_rProgramming/01_library_clean.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/01_library_clean.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/01_library_clean.R')
source('~/Dokumente/coursera_git/02_rProgramming/01_library_clean.R', echo=TRUE)
help(cd)
list.files("specdata")
list.files(R.home("specdata"))
x<-list.files(R.home("specdata"))
x
dir(path = "specdata")
dir(path = "specdata",include.dirs = TRUE)
dir(path = "",include.dirs = TRUE)
x<-dir(path = "",include.dirs = TRUE)
x
dir()
dir(recursive = TRUE)
dir(path = "1_Assignment/specdata",recursive = TRUE)
x<-dir(path = "1_Assignment/specdata",recursive = TRUE)
class(x)
x_files<-dir(path = "1_Assignment/specdata",recursive = TRUE)
rm(ls())
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
getwd()
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
x_files[2]
x_files[[2]]
x_files[5:10]
unclass(x_files)
x_files[[1]][5:10]
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
x_selectedFiles[2]
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
head(dat)
unclass(dat)
dat[1]
colMeans(x = dat,na.rm = TRUE)
colMeans(x = dat[2:3],na.rm = TRUE)
colMeans(x = [dat$sulfate, dat$nitrate],na.rm = TRUE)
colMeans(x = dat$sulfate, dat$nitrate,na.rm = TRUE)
colMeans(x = c(dat$sulfate, dat$nitrate),na.rm = TRUE)
colMeans(x = dat[2:3],na.rm = TRUE)
class(dat)
head(dat$sulfate)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
x_selectedFiles[2]
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
x_targetFile<-paste(x_path,i,sep = "/")
isAvailable<-file.exists(x_targetFile)
dat<-read.csv(file = x_targetFile,header = TRUE,sep = ",",quote = "\"")
colMeans(x = dat[2:3],na.rm = TRUE)
}
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
class(erg)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
head(dat)
class(dat)
colMeans(x = dat[,c("sulfate","nitrate")],na.rm = TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/1_Assignment/testvector.R', echo=TRUE)
