f_fac<-c("pos","neg","pos","pos","neg")
table(f_fac)
unclass(f_fac)
a <- c(10,20,15,43,76,41,25,46)                        # numerisch
b <- factor(c("m", "w", "m", "w", "m", "w", "m", "w")) # Faktor Geschlecht: m=mÃ¤nnlich, w=weiblich
c <- c(2,5,8,3,6,1,5,6)                                # numerisch
myframe <- data.frame(a,b,c)
myframe
unclass(myframe)
m_mat<-matrix(1:6,2,3)
m_mat
for(i in seq_len(nrow(x)))
for(j in seq_len(ncol(x)))
print(m_mat[i,j])
m_mat<-matrix(11:16,2,3)
for(i in seq_len(nrow(m_mat))) {
for(j in seq_len(ncol(m_mat))) {
print(m_mat[i,j])
}
}
c<-rbinom(10,1,0.5)
c<-rbinom(10,1,0.5)
rbinom(10,1,0.5)
rbinom(10,1,0.9)
rbinom(10,1,0.5)
rbinom(10,3,0.5)
rbinom(20,1,0.5)
daten<-rnorm(100)
daten
sd(daten,na.rm = TRUE)
daten<-rnorm(100)
sd(daten,na.rm = TRUE)
above10 <- function(x) {
use <- x > 10
x[use]
}
data <- 5:15
data
above10(data)
source("bib_fun_1.R")
col_mean(werte_mat = airquality,removeNA = FALSE)
col_mean(werte_mat = airquality,removeNA = TRUE)
source("bib_fun_1.R")
col_mean(werte_mat = airquality,removeNA = TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/bib_fun_1.R')
debugSource('~/Dokumente/coursera_git/02_rProgramming/bib_fun_1.R', echo=TRUE)
col_mean(werte_mat = airquality,removeNA = TRUE)
# Leeren Vektor initalisieren
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x = werte_mat,na.rm = removeNA)
}
means
}
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x = werte_mat,na.rm = removeNA)
}
means
}
airquality
source("bib_fun_1.R")
col_mean(werte_mat = airquality)
source("bib_fun_1.R")
col_mean(werte_mat = airquality)
col_mean(werte_mat = airquality, removeNA = TRUE)
matrix(data = rep(x = 10:4),2,4)
matrix(data = rep(x = 10:4),2,2)
matrix(data = rep(x = 10,4),2,2)
matrix(data = rep(x = 10,4),4,2)
matrix(data = rep(x = 10,2),4,2)
rep(1:4,2)
rep(1:4,each=2)
rep(1:4,each=3,len=6)
rep(1:4,each=3,len=7)
rep(1:4,each=3,len=9)
rep(1:4,each=3,len=10)
rep(1:4,3)
A<-matrix(1:4,2,2)
View(A)
B<-matrix(rep(10,4),2,2)
View(B)
A*B
A%*%B
A
B
x<-Sys.time
x
x<-Sys.time()
x
unclass(x)
as.POSIXct(x)
p<-as.POSIXct(x)
unclass(p)
names(unclass(p))
class(p)
names(unclass(p))
unclass(p)
p$sec
as.POSIXlt(x)
p<-as.POSIXlt(x)
names(p)
names(unclass(p))
p$sec
Sys.time
Sys.time()
Sys.time()
time()
x<-Sys.time()
as.POSIXlt(x)
p<-as.POSIXlt(x)
names(unclass(p))
p$is
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
