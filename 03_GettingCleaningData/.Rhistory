f_fac<-c("pos","neg","pos","pos","neg")
table(f_fac)
unclass(f_fac)
a <- c(10,20,15,43,76,41,25,46)                        # numerisch
b <- factor(c("m", "w", "m", "w", "m", "w", "m", "w")) # Faktor Geschlecht: m=männlich, w=weiblich
c <- c(2,5,8,3,6,1,5,6)                                # numerisch
myframe <- data.frame(a,b,c)
myframe
unclass(myframe)
m_mat<-matrix(1:6,2,3)
m_mat
for(i in seq_len(nrow(x)))
for(j in seq_len(ncol(x)))
print(m_mat[i,j])
m_mat<-matrix(11:16,2,3)
for(i in seq_len(nrow(m_mat))) {
for(j in seq_len(ncol(m_mat))) {
print(m_mat[i,j])
}
}
c<-rbinom(10,1,0.5)
c<-rbinom(10,1,0.5)
rbinom(10,1,0.5)
rbinom(10,1,0.9)
rbinom(10,1,0.5)
rbinom(10,3,0.5)
rbinom(20,1,0.5)
daten<-rnorm(100)
daten
sd(daten,na.rm = TRUE)
daten<-rnorm(100)
sd(daten,na.rm = TRUE)
above10 <- function(x) {
use <- x > 10
x[use]
}
data <- 5:15
data
above10(data)
source("bib_fun_1.R")
col_mean(werte_mat = airquality,removeNA = FALSE)
col_mean(werte_mat = airquality,removeNA = TRUE)
source("bib_fun_1.R")
col_mean(werte_mat = airquality,removeNA = TRUE)
debugSource('~/Dokumente/coursera_git/02_rProgramming/bib_fun_1.R')
debugSource('~/Dokumente/coursera_git/02_rProgramming/bib_fun_1.R', echo=TRUE)
col_mean(werte_mat = airquality,removeNA = TRUE)
# Leeren Vektor initalisieren
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x = werte_mat,na.rm = removeNA)
}
means
}
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x = werte_mat,na.rm = removeNA)
}
means
}
airquality
source("bib_fun_1.R")
col_mean(werte_mat = airquality)
source("bib_fun_1.R")
col_mean(werte_mat = airquality)
col_mean(werte_mat = airquality, removeNA = TRUE)
matrix(data = rep(x = 10:4),2,4)
matrix(data = rep(x = 10:4),2,2)
matrix(data = rep(x = 10,4),2,2)
matrix(data = rep(x = 10,4),4,2)
matrix(data = rep(x = 10,2),4,2)
rep(1:4,2)
rep(1:4,each=2)
rep(1:4,each=3,len=6)
rep(1:4,each=3,len=7)
rep(1:4,each=3,len=9)
rep(1:4,each=3,len=10)
rep(1:4,3)
A<-matrix(1:4,2,2)
View(A)
B<-matrix(rep(10,4),2,2)
View(B)
A*B
A%*%B
A
B
x<-Sys.time
x
x<-Sys.time()
x
unclass(x)
as.POSIXct(x)
p<-as.POSIXct(x)
unclass(p)
names(unclass(p))
class(p)
names(unclass(p))
unclass(p)
p$sec
as.POSIXlt(x)
p<-as.POSIXlt(x)
names(p)
names(unclass(p))
p$sec
Sys.time
Sys.time()
Sys.time()
time()
x<-Sys.time()
as.POSIXlt(x)
p<-as.POSIXlt(x)
names(unclass(p))
p$is
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x<-c(1,2,NA,10)
is.na(x)
good<-!is.na(x)
goog
good
a <- c(10,20,15,43,76,41,25,46)                        # numerisch
b <- factor(c("m", "w", "m", "w", "m", "w", "m", "w")) # Faktor Geschlecht: m=männlich, w=weiblich
c <- c(2,5,8,3,6,1,5,6)                                # numerisch
myframe <- data.frame(a,b,c); myframe
names(myframe)<-c("Age","Gender","Dose")
myframe
x<-c(1,2,NA,10)
good<-!is.na(x)
good#
complete.cases(x)
y<-x[complete.cases(x)]
y
matrix(rbinom(10,1,0.5),5,2)
matrix(rbinom(10,1,0.5),5,2)
matrix(rbinom(10,1,0.7),5,2)
matrix(rbinom(10,NA,0.2),5,2)
matrix(rbinom(10,NA,0.3),5,2)
matrix(rbinom(1,NA,0.3),5,2)
matrix(rbinom(10,1,0.7),5,2)
matrix(rbinom(10,1,0.5),5,2)
m<-matrix(rbinom(10,1,0.5),5,2)
m
m<-matrix(rbinom(10,1,0.2),5,2)
m
m[3,1]=NA
m
m
m[complete.cases(m)]
m[,complete.cases(m)]
m[complete.cases(m),,drop=FALSE]
m[,complete.cases(m),drop=FALSE]
m[complete.cases(m),,drop=FALSE]
m
subset(x = m,select = !is.na)
subset(x = m, !is.na)
subset(x = m, rm.na)
subset(x = m, subset = is.na)
subset(x = m, is.na(m))
subset(x = m, is.na)
subset(x = m, is.na())
subset(x = m, is.na(m))
subset(x = m, is.na(row(m))
lll
subset(x = m, is.na(row(m))
llll
subset.matrix(x = m)
subset.matrix(x = m,select = "NA")
subset.matrix(x = m,select = is.na)
subset.matrix(x = m,select = is.na())
subset.matrix(x = m,select = is.na(m))
subset.matrix(x = m,select = complete.cases(m))
m[,!is.na()]
m[,!is.na]
m[,!is.na(m)]
m
m != NA
m > NA
m
m>0
m>NA
m!NA
m!=NA
m<0
m[,!=NA]
m[,NA]
m[,=NA]
m[,is.na]
m<-matrix(rbinom(10,1,0.2),5,2)
m[3,1]<-NA
m
subset(m,subset = !NA, select = c(1,2))
subset(m,subset = NA, select = c(1,2))
subset(m,select = c(1,2))
subset(m,!is.na(m)select = c(1,2))
subset(m,is.na(m),select = c(1,2))
subset(m,is.na()=FALSE,select = c(1,2))
subset(m,is.na=FALSE,select = c(1,2))
subset(m,is.na=TRUE,select = c(1,2))
subset(m,subset = is.na=TRUE,select = c(1,2))
subset(m,subset = is.na,select = c(1,2))
subset(m,subset = complete.cases(m),select = c(1,2))
m
m[complete.cases(m),]
m[complete.cases(m),][,2]
m[complete.cases(m),][,]
m[complete.cases(m),]
help(file)
con <- gzfile("rprog-data-quiz1_data.zip","r")
dat<-read.csv(con)
dat<-read.csv2(con)
View(dat)
View(dat)
dat<-readLines(con,10)
dat<-readLines(con)
read.table(unz("rprog-data-quiz1_data.zip"))
read.table(unz("rprog-data-quiz1_data.zip","hw1_data.csv"))
read.table(unz("rprog-data-quiz1_data.zip","hw1_data.csv"), sep = ",")
dat<-read.table(unz("rprog-data-quiz1_data.zip","hw1_data.csv"), sep = ",",quote = "\"")
View(dat)
dat<-read.table(unz("rprog-data-quiz1_data.zip","hw1_data.csv"), sep = ",",header = TRUE,quote = "\"")
View(dat)
View(dat)
head(dat)
class(dat)
names(dat)
colnames(dat)
unclass(dat)
View(dat)
dat$O
dat$W
dat<-airquality
dat
class(dat)
dput(x = dat, file = "dat.R")
rm(list=ls())
dat
dget(file = "dat.R")
dat<-dget(file = "dat.R")
v_vec<-c(1:4,11:14);
m_mat<-matrix(v_vec, nrow=5, ncol=4);
m_mat
m_mat<-matrix(v_vec, nrow=4, ncol=4);
dump(c(v_vec,m_mat),file = "dat.R")
dump(c(v_vec,m_mat),file = "dat1.R")
dump(c("v_vec","m_mat"),file = "dat.R")
rm(list=ls())
source("dat.R")
ls()
dat<-read.table(unz("rprog-data-quiz1_data.zip","hw1_data.csv"), sep = ",",header = TRUE,quote = "\"")
dat[complete.cases(dat),]
tmp<-dat[complete.cases(dat),]
dim(tmp)
rm(tmp)
good_dat<-dat[complete.cases(dat),]
dim(good_dat)
colMeans(x = dat, na.rm = TRUE)
colMeans(x = good_dat)
good_dat$Oz
dat_sub <- subset(x = good_dat, subset = good_dat$Oz>31 & good_dat$Te>90)
dat_sub
colMeans(x = dat_sub)
??max
max(dat_sub)
max(dat_sub$Solar.R)
max(dat_sub$Ozone)
max(dat_sub$Ozone)
# - Mittelwert jeder Spalte
source('~/Dokumente/coursera_git/02_rProgramming/01_library_clean.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/01_library_clean.R', echo=TRUE)
source('~/Dokumente/coursera_git/02_rProgramming/01_library_clean.R')
source('~/Dokumente/coursera_git/02_rProgramming/01_library_clean.R', echo=TRUE)
x<-list(a=1:6,b=rnorm(10))
x
lapply(X = x,FUN = mean)
y<-lapply(X = x,FUN = mean)
y[1]
y$a
y$b
x<-1:4
lapply(x, runif)
lapply(x, runif)
lapply(x, runif, min=0, max = 10)
a=matrix(1:4,2,2); b=matrix(1:6,3,2)
x<-list(c(a,b))
x
x<-list(a,b)
x
doex<-function(m) {
m[,1]
}
doex(a)
lapply(x,doex)
doex<-function(m) {
m[,1,drop=FALSE]
}
lapply(x,doex)
doex<-function(m) {
m[,1,drop=FALSE]
}
lala<-sapply(x,doex)
class(lala)
unclass(lala)
help(apply)
m<-matrix(rnorm(30),10,3)
m
apply(X = m,MARGIN = 1,FUN = sum)
apply(X = m,MARGIN = 2,FUN = sum)
m
apply(X = m,MARGIN = 1,FUN = quantile, probs=c(0.25,0.75))
source('~/Dokumente/coursera_git/02_rProgramming/Q3_Testbench.R')
source('~/Dokumente/coursera_git/02_rProgramming/Q3_Testbench.R')
source('~/Dokumente/coursera_git/02_rProgramming/Q3_Testbench.R')
apply(X = iris[,1:4],2,mean)
source('~/Dokumente/coursera_git/02_rProgramming/Q3_Testbench.R')
tapply(X = mtcars$hp,INDEX = mtcars$cyl,mean)
source('~/Dokumente/coursera_git/02_rProgramming/Q3_Testbench.R')
source('~/Dokumente/coursera_git/02_rProgramming/Q3_Testbench.R')
source('~/Dokumente/coursera_git/02_rProgramming/Q3_Testbench.R')
source('~/Dokumente/coursera_git/02_rProgramming/Q3_Testbench.R')
source('~/Dokumente/coursera_git/02_rProgramming/Q3_Testbench.R')
str(rnorm)
rbinom(n = 100,size = 1,prob = 0.5)
install.packages("Rmysql")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages(c("httr", "markdown", "mime", "RCurl", "swirl"))
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("RCurl")
library(rhdf5)
X<-data.frame(var1<-sample(1:5),var2<-sample(6:10),var3<-sample(11:15))
X
X<-data.frame("var1"<-sample(1:5),"var2"<-sample(6:10),"var3"<-sample(11:15))
X
X<-data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X
X[sample(1:5),]
rm(list=ls())
set.seed(13435)
X<-data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X
X<-[sample(1:5),]
X<-X[sample(1:5),]
X$var2[c(1,3)]=NA
X
X[,1]
X[,"var1"]
X[1:2,"var2"]
X[1:2,"var2"]
X
X[(X$var1<=3 & X$var3>11),]
X[(X$var1<=3 | X$var3>15),]
X
X[which(X$var2>8),]
which(X$var2>8)
X
X[order(X$var1,X$var3),]
library(plyr)
arrange(X,var1)
arrange(df = X,var1, var3)
X
X$var4<-rnorm(5)
X
cbind(X,rnorm(5))
warpbreaks
fileUrl<-"https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
setwd("/home/impulsleistung/Dokumente/coursera_git/03_GettingCleaningData/")
download.file(fileUrl,destfile = "data/restaurants.csv",method = "wget")
restData<-read.csv("data/restaurants.csv")
head(restData,n = 3)
tail(restData,n = 3)
summary(restData)
str(restData)
quantile(restData$councilDistrict,na.rm = TRUE)
quantile(restData$councilDistrict,na.rm = TRUE, probs = c(0.5,0.75,0.9))
table(restData$zipCode,useNA = "ifany")
table(restData$councilDistrict,restData$zipCode)
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode>0)
colSums(is.na(restData))
all(colSums(is.na(restData))==0)
table(restData$zipCode %in% c("21212","21213"))
restData$zipCode %in% c("21212","21213")
restData[restData$zipCode %in% c("21212","21213"),]
head (restData[restData$zipCode %in% c("21212","21213"),] )
data(UCBAdmissions)
UCBAdmissions
DF<-as.data.frame(UCBAdmissions)
summary(DF)
DF
xt<-xtabs(Freq ~ Gender + Admit,data = DF)
xt
xtabs(Freq ~ Gender,data = DF)
head(warpbreaks,20)
warpbreaks$replicate <- rep(1:9, len=54)
head(warpbreaks,20)
xt<-xtabs(breaks ~., data = warpbreaks)
xt
head(warpbreaks,20)
ftable(xt)
fakeData<-rnorm(1e5)
print(object.size(fakeData), units="Mb" )
restData<-read.csv("data/restaurants.csv")
seq(1,50,by = 3)
seq(1,50,length.out = 10)
s1<-c(1,3,8,25,100)
s1
seq(along.with = s1)
unique(restData$neighborhood)
sort(unique(restData$neighborhood))
restData$nearMe<-restData$neighborhood %in% c("Roland Park", "Homeland")
restData$nearMe
table(restData$nearMe)
restData$zipWrong<-ifelse(test = restData$zipCode<0,TRUE,FALSE)
table(restData$zipWrong)
table(restData$zipWrong,restData$zipCode<0)
table(restData$zipCode<0)
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups<-cut2(restData$zipCode,g = 4)
table(restData$zipGroups)
restData$zipGroups
table(restData$zipGroups)
restData$zcf<-factor(restData$zipCode)
restData$zcf[1:10]
head(as.numeric(restData$zcf))
yesno<-sample(c("yes","no"),size = 10,replace = TRUE)
yesnofac<-factor(yesno,levels = c("yes","no"))
yesnofac
relevel(x = yesnofac,ref = "yes")
relevel(x = yesnofac,ref = "no")
yesnofac<-relevel(x = yesnofac,ref = "no")
as.numeric(yesnofac)
yesnofac<-relevel(x = yesnofac,ref = "yes")
as.numeric(yesnofac)
library(plyr)
library(reshape2)
head(mtcars)
mtcars$carname<-rownames(mtcars)
head(mtcars)
carMelt<-melt(mtcars,id.vars = c("carname","gear","cyl"),measure.vars = c("mpg","hp"))
head(carMelt)
carMelt
cylDate<-dcast(carMelt,cyl ~ variable)
cylDate
cylDate<-dcast(carMelt,cyl ~ variable,mean)
cylDate
head(InsectSprays)
tail(InsectSprays)
dim(InsectSprays)
tapply(InsectSprays$count,InsectSprays$spray,sum)
split(InsectSprays$count,InsectSprays$spray)
spIns<-split(InsectSprays$count,InsectSprays$spray)
lapply(spIns,sum)
sapply(spIns,sum,)
sapply(spIns,sum,simplify = TRUE)
sprCount<-lapply(spIns,sum)
sprCount
unlist(sprCount)
str(ddply)
ddply(.data = InsectSprays,.variables = spray,summarize,sum=sum(count))
ddply(.data = InsectSprays,.variables = (spray),summarize,sum=sum(count))
ddply(.data = InsectSprays,.(spray),summarize,sum=sum(count))
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
ddply(InsectSprays,spray,summarize,sum=sum(count))
ddply(InsectSprays,InsectSprays$spray,summarize,sum=sum(count))
ddply(InsectSprays,.(spray),summarize,sum=ave(count,FUN=sum))
ddply(InsectSprays,c("spray"),summarise,sum=sum(count))
ddply(InsectSprays,"spray",summarise,sum=sum(count))
ddply(InsectSprays,spray,summarise,sum=sum(count))
ddply(InsectSprays,.spray,summarise,sum=sum(count))
ddply(InsectSprays,"spray",summarise,sum=sum(count))
spraySums<-ddply(InsectSprays,"spray",summarise,sum=ave(count,FUN=sum))
spraySums
ddply(InsectSprays,"spray",summarise,sum=sum(count))
